<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.turtle.sudoku.repository.SudokuRepository" >
  <resultMap id="BaseResultMap" type="com.turtle.sudoku.entity.Sudoku" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="problem" property="problem" jdbcType="VARCHAR" />
    <result column="level" property="level" jdbcType="INTEGER" />
    <result column="lastupdatetime" property="lastupdatetime" jdbcType="BIGINT" />
    <result column="bestresult" property="bestresult" jdbcType="INTEGER" />
  </resultMap>

 <sql id="Base_Column_List" >
   `id`,
   `problem`,
   `level`,
   `lastupdatetime`,
   `bestresult`
 </sql>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sudoku
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sudoku
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
  <insert id="insert" parameterType="com.turtle.sudoku.entity.Sudoku" >
    insert into sudoku ( 
     `id`,
     `problem`,
     `level`,
     `lastupdatetime`,
     `bestresult`
    )
    values (
     #{id,jdbcType=INTEGER},
     #{problem,jdbcType=VARCHAR},
     #{level,jdbcType=INTEGER},
     #{lastupdatetime,jdbcType=BIGINT},
     #{bestresult,jdbcType=INTEGER}
 )
  </insert>
  
  
  
  <insert id="insertSelective" parameterType="com.turtle.sudoku.entity.Sudoku" >
    insert into sudoku
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        `id`,
      </if>
      <if test="problem != null" >
        `problem`,
      </if>
      <if test="level != null" >
        `level`,
      </if>
      <if test="lastupdatetime != null" >
        `lastupdatetime`,
      </if>
      <if test="bestresult != null" >
        `bestresult`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="problem != null" >
        #{problem,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        #{level,jdbcType=INTEGER},
      </if>
      <if test="lastupdatetime != null" >
        #{lastupdatetime,jdbcType=BIGINT},
      </if>
      <if test="bestresult != null" >
        #{bestresult,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  
  <update id="updateByPrimaryKeySelective" parameterType="com.turtle.sudoku.entity.Sudoku" >
    update sudoku
	  <set>
       <if test="problem != null" >
        `problem`= #{problem,jdbcType=VARCHAR},
       </if>
       <if test="level != null" >
        `level`= #{level,jdbcType=INTEGER},
       </if>
       <if test="lastupdatetime != null" >
        `lastupdatetime`= #{lastupdatetime,jdbcType=BIGINT},
       </if>
       <if test="bestresult != null" >
        `bestresult`= #{bestresult,jdbcType=INTEGER},
       </if>
          </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <update id="updateByPrimaryKey" parameterType="com.turtle.sudoku.entity.Sudoku" >
    update sudoku
    set 
       `problem` = #{problem,jdbcType=VARCHAR},
       `level` = #{level,jdbcType=INTEGER},
       `lastupdatetime` = #{lastupdatetime,jdbcType=BIGINT},
       `bestresult` = #{bestresult,jdbcType=INTEGER}
     where id = #{id,jdbcType=INTEGER}
  </update>
  

  
  <select id="selectCount" resultType="java.lang.Integer" parameterType="com.turtle.sudoku.entity.Sudoku" >
    select count(*) from sudoku
    <where >
            <if test="id != null" >
        and `id` = #{id,jdbcType=INTEGER}
      </if>
            <if test="problem != null" >
        and `problem` = #{problem,jdbcType=VARCHAR}
      </if>
            <if test="level != null" >
        and `level` = #{level,jdbcType=INTEGER}
      </if>
            <if test="lastupdatetime != null" >
        and `lastupdatetime` = #{lastupdatetime,jdbcType=BIGINT}
      </if>
            <if test="bestresult != null" >
        and `bestresult` = #{bestresult,jdbcType=INTEGER}
      </if>
          </where>
  </select>

    <select id="selectPage" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from sudoku where 1 = 1 
        <if test="sudoku.id != null" >
      and `id` = #{sudoku.id,jdbcType=INTEGER}
    </if>
        <if test="sudoku.problem != null" >
      and `problem` = #{sudoku.problem,jdbcType=VARCHAR}
    </if>
        <if test="sudoku.level != null" >
      and `level` = #{sudoku.level,jdbcType=INTEGER}
    </if>
        <if test="sudoku.lastupdatetime != null" >
      and `lastupdatetime` = #{sudoku.lastupdatetime,jdbcType=BIGINT}
    </if>
        <if test="sudoku.bestresult != null" >
      and `bestresult` = #{sudoku.bestresult,jdbcType=INTEGER}
    </if>
        <if test="pageable.sort != null" >
      order by 
      <foreach collection="pageable.sort" item="order" separator="," >
        <if test="
   order.property == 'id' 
   || order.property == 'problem'
   || order.property == 'level'
   || order.property == 'lastupdatetime'
   || order.property == 'bestresult'
        " >
        		${order.property} ${order.direction}
        </if>
      </foreach>
    </if>
    <if test="pageable.offset >= 0 and pageable.pageSize > 0" >
      limit ${pageable.offset}, ${pageable.pageSize}
    </if>
  </select>
  <select id="selectByLevel" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sudoku
    where level = #{level,jdbcType=INTEGER}
  </select>
  <select id="selectByGameId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sudoku
    where id in (select problemid from games where id=#{gameId,jdbcType=INTEGER}) limit 1
  </select>
 </mapper>
  

  
	